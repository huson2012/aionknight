/**
 * Эмулятор игрового сервера Aion 2.7 от команды разработчиков 'Aion-Knight Dev. Team' является 
 * свободным программным обеспечением; вы можете распространять и/или изменять его согласно условиям 
 * Стандартной Общественной Лицензии GNU (GNU GPL), опубликованной Фондом свободного программного 
 * обеспечения (FSF), либо Лицензии версии 3, либо (на ваше усмотрение) любой более поздней 
 * версии.
 * 
 * Программа распространяется в надежде, что она будет полезной, но БЕЗ КАКИХ БЫ ТО НИ БЫЛО 
 * ГАРАНТИЙНЫХ ОБЯЗАТЕЛЬСТВ; даже без косвенных  гарантийных  обязательств, связанных с 
 * ПОТРЕБИТЕЛЬСКИМИ СВОЙСТВАМИ и ПРИГОДНОСТЬЮ ДЛЯ ОПРЕДЕЛЕННЫХ ЦЕЛЕЙ. Для подробностей смотрите 
 * Стандартную Общественную Лицензию GNU.
 * 
 * Вы должны были получить копию Стандартной Общественной Лицензии GNU вместе с этой программой. 
 * Если это не так, напишите в Фонд Свободного ПО (Free Software Foundation, Inc., 675 Mass Ave, 
 * Cambridge, MA 02139, USA
 * 
 * Веб-cайт разработчиков : http://aion-knight.ru
 * Поддержка клиента игры : Aion 2.7 - 'Арена Смерти' (Иннова) 
 * Версия серверной части : Aion-Knight 2.7 (Beta version)
 */

package gameserver.utils;

import gameserver.model.gameobjects.VisibleObject;

public class PositionUtil
{
	private static final float MAX_ANGLE_DIFF = 90f;
	public static boolean isBehindTarget(VisibleObject object1, VisibleObject object2)
	{
		float angleObject1 = MathUtil.calculateAngleFrom(object1, object2);
		float angleObject2 = MathUtil.convertHeadingToDegree(object2.getHeading());
		float angleDiff = angleObject1 - angleObject2;
		
		if (angleDiff <= -360 + MAX_ANGLE_DIFF) angleDiff += 360;
        if (angleDiff >= 360 - MAX_ANGLE_DIFF) angleDiff -= 360;
        return Math.abs(angleDiff) <= MAX_ANGLE_DIFF;
	}
	public static boolean isInFrontOfTarget(VisibleObject object1, VisibleObject object2)
	{
		float angleObject2 = MathUtil.calculateAngleFrom(object2, object1);
		float angleObject1 = MathUtil.convertHeadingToDegree(object2.getHeading());
		float angleDiff = angleObject1 - angleObject2;
		
		if (angleDiff <= -360 + MAX_ANGLE_DIFF) angleDiff += 360;
		if (angleDiff >= 360 - MAX_ANGLE_DIFF) angleDiff -= 360;
		return Math.abs(angleDiff) <= MAX_ANGLE_DIFF;
	}
}